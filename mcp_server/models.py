# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T12:30:56+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, confloat, conint, constr


class AccessDeniedException(RootModel[Any]):
    root: Any


class ActivateAnomalyDetectorResponse(BaseModel):
    pass


class AggregationFunction(Enum):
    AVG = 'AVG'
    SUM = 'SUM'


class AlertDescription(RootModel[constr(pattern=r'.*\S.*', max_length=256)]):
    root: constr(pattern=r'.*\S.*', max_length=256)


class AlertName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)


class AlertStatus(Enum):
    ACTIVE = 'ACTIVE'
    INACTIVE = 'INACTIVE'


class AlertType(Enum):
    SNS = 'SNS'
    LAMBDA = 'LAMBDA'


class AnomalyDetectionTaskStatus(Enum):
    PENDING = 'PENDING'
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'
    FAILED_TO_SCHEDULE = 'FAILED_TO_SCHEDULE'


class AnomalyDetectionTaskStatusMessage(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class AnomalyDetectorDescription(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class AnomalyDetectorFailureType(Enum):
    ACTIVATION_FAILURE = 'ACTIVATION_FAILURE'
    BACK_TEST_ACTIVATION_FAILURE = 'BACK_TEST_ACTIVATION_FAILURE'
    DELETION_FAILURE = 'DELETION_FAILURE'
    DEACTIVATION_FAILURE = 'DEACTIVATION_FAILURE'


class AnomalyDetectorName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)


class AnomalyDetectorStatus(Enum):
    ACTIVE = 'ACTIVE'
    ACTIVATING = 'ACTIVATING'
    DELETING = 'DELETING'
    FAILED = 'FAILED'
    INACTIVE = 'INACTIVE'
    LEARNING = 'LEARNING'
    BACK_TEST_ACTIVATING = 'BACK_TEST_ACTIVATING'
    BACK_TEST_ACTIVE = 'BACK_TEST_ACTIVE'
    BACK_TEST_COMPLETE = 'BACK_TEST_COMPLETE'
    DEACTIVATED = 'DEACTIVATED'
    DEACTIVATING = 'DEACTIVATING'


class Arn(RootModel[constr(pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256)]):
    root: constr(pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256)


class AthenaDataCatalog(RootModel[constr(min_length=1, max_length=256)]):
    root: constr(min_length=1, max_length=256)


class AthenaDatabaseName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_]+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[a-zA-Z0-9_]+', min_length=1, max_length=255)


class AthenaS3ResultsPath(
    RootModel[constr(pattern=r'^s3://[a-z0-9].+$', max_length=1024)]
):
    root: constr(pattern=r'^s3://[a-z0-9].+$', max_length=1024)


class AthenaTableName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9_]+', min_length=1, max_length=128)


class AthenaWorkGroupName(
    RootModel[constr(pattern=r'[a-zA-Z0-9._-]{1,128}', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[a-zA-Z0-9._-]{1,128}', min_length=1, max_length=128)


class BackTestAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn


class BackTestAnomalyDetectorResponse(BaseModel):
    pass


class BinaryAttributeValue(RootModel[str]):
    root: str


class BinaryListAttributeValue(RootModel[List[BinaryAttributeValue]]):
    root: List[BinaryAttributeValue]


class Boolean(RootModel[bool]):
    root: bool


class CSVFileCompression(Enum):
    NONE = 'NONE'
    GZIP = 'GZIP'


class Charset(RootModel[constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', max_length=63)]):
    root: constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', max_length=63)


class ColumnName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)


class Confidence(Enum):
    HIGH = 'HIGH'
    LOW = 'LOW'
    NONE = 'NONE'


class ConflictException(RootModel[Any]):
    root: Any


class CreateAlertResponse(BaseModel):
    AlertArn: Optional[Arn] = None


class CreateAnomalyDetectorResponse(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None


class CreateMetricSetResponse(BaseModel):
    MetricSetArn: Optional[Arn] = None


class DataItem(RootModel[str]):
    root: str


class DataQualityMetricDescription(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class DataQualityMetricType(Enum):
    COLUMN_COMPLETENESS = 'COLUMN_COMPLETENESS'
    DIMENSION_UNIQUENESS = 'DIMENSION_UNIQUENESS'
    TIME_SERIES_COUNT = 'TIME_SERIES_COUNT'
    ROWS_PROCESSED = 'ROWS_PROCESSED'
    ROWS_PARTIAL_COMPLIANCE = 'ROWS_PARTIAL_COMPLIANCE'
    INVALID_ROWS_COMPLIANCE = 'INVALID_ROWS_COMPLIANCE'
    BACKTEST_TRAINING_DATA_START_TIME_STAMP = 'BACKTEST_TRAINING_DATA_START_TIME_STAMP'
    BACKTEST_TRAINING_DATA_END_TIME_STAMP = 'BACKTEST_TRAINING_DATA_END_TIME_STAMP'
    BACKTEST_INFERENCE_DATA_START_TIME_STAMP = (
        'BACKTEST_INFERENCE_DATA_START_TIME_STAMP'
    )
    BACKTEST_INFERENCE_DATA_END_TIME_STAMP = 'BACKTEST_INFERENCE_DATA_END_TIME_STAMP'


class DatabaseHost(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=253)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=253)


class DatabasePort(RootModel[conint(ge=1, le=65535)]):
    root: conint(ge=1, le=65535)


class DateTimeFormat(RootModel[constr(pattern=r'.*\S.*', max_length=63)]):
    root: constr(pattern=r'.*\S.*', max_length=63)


class DeactivateAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn


class DeactivateAnomalyDetectorResponse(BaseModel):
    pass


class DeleteAlertRequest(BaseModel):
    AlertArn: Arn


class DeleteAlertResponse(BaseModel):
    pass


class DeleteAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn


class DeleteAnomalyDetectorResponse(BaseModel):
    pass


class Delimiter(RootModel[constr(pattern=r'[^\r\n]', max_length=1)]):
    root: constr(pattern=r'[^\r\n]', max_length=1)


class DescribeAlertRequest(BaseModel):
    AlertArn: Arn


class DescribeAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn


class DescribeMetricSetRequest(BaseModel):
    MetricSetArn: Arn


class DimensionList(RootModel[List[ColumnName]]):
    root: List[ColumnName] = Field(..., min_length=1)


class DimensionValue(RootModel[str]):
    root: str


class DimensionValueList(RootModel[List[DimensionValue]]):
    root: List[DimensionValue] = Field(..., max_length=10, min_length=1)


class Double(RootModel[float]):
    root: float


class ErrorMessage(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class FilterOperation(Enum):
    EQUALS = 'EQUALS'


class FlowName(RootModel[constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)]):
    root: constr(pattern=r'[a-zA-Z0-9][\w!@#.-]+', max_length=256)


class Frequency(Enum):
    P1D = 'P1D'
    PT1H = 'PT1H'
    PT10M = 'PT10M'
    PT5M = 'PT5M'


class GetDataQualityMetricsRequest(BaseModel):
    AnomalyDetectorArn: Arn
    MetricSetArn: Optional[Arn] = None


class HeaderList(RootModel[List[ColumnName]]):
    root: List[ColumnName]


class HeaderValue(RootModel[str]):
    root: str


class HeaderValueList(RootModel[List[HeaderValue]]):
    root: List[HeaderValue]


class HistoricalDataPath(
    RootModel[constr(pattern=r'^s3://[a-z0-9].+$', max_length=1024)]
):
    root: constr(pattern=r'^s3://[a-z0-9].+$', max_length=1024)


class HistoricalDataPathList(RootModel[List[HistoricalDataPath]]):
    root: List[HistoricalDataPath] = Field(..., max_length=1, min_length=1)


class Integer(RootModel[int]):
    root: int


class InternalServerException(RootModel[Any]):
    root: Any


class ItemizedMetricStats(BaseModel):
    MetricName: Optional[ColumnName] = None
    OccurrenceCount: Optional[Integer] = None


class ItemizedMetricStatsList(RootModel[List[ItemizedMetricStats]]):
    root: List[ItemizedMetricStats]


class JsonFileCompression(Enum):
    NONE = 'NONE'
    GZIP = 'GZIP'


class JsonFormatDescriptor(BaseModel):
    Charset_1: Optional[Charset] = Field(None, alias='Charset')
    FileCompression: Optional[JsonFileCompression] = None


class KmsKeyArn(
    RootModel[
        constr(
            pattern=r'arn:aws.*:kms:.*:[0-9]{12}:key/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
            min_length=20,
            max_length=2048,
        )
    ]
):
    root: constr(
        pattern=r'arn:aws.*:kms:.*:[0-9]{12}:key/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
        min_length=20,
        max_length=2048,
    )


class LambdaConfiguration(BaseModel):
    LambdaArn: Arn
    RoleArn: Arn


class ListTagsForResourceRequest(BaseModel):
    pass


class MaxResults(RootModel[conint(ge=1, le=100)]):
    root: conint(ge=1, le=100)


class Message(RootModel[str]):
    root: str


class MetricChangePercentage(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class MetricName(
    RootModel[constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', max_length=256)]
):
    root: constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', max_length=256)


class MetricNameList(RootModel[List[MetricName]]):
    root: List[MetricName] = Field(..., max_length=5, min_length=1)


class MetricSetDescription(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class MetricSetName(
    RootModel[
        constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)
    ]
):
    root: constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63)


class MetricValue(RootModel[float]):
    root: float


class MetricValueList(RootModel[List[MetricValue]]):
    root: List[MetricValue]


class Namespace(RootModel[constr(pattern=r'[^:].*', min_length=1, max_length=255)]):
    root: constr(pattern=r'[^:].*', min_length=1, max_length=255)


class NextToken(RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=3000)]):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=3000)


class NumberAttributeValue(RootModel[str]):
    root: str


class NumberListAttributeValue(RootModel[List[NumberAttributeValue]]):
    root: List[NumberAttributeValue]


class Offset(RootModel[conint(ge=0, le=432000)]):
    root: conint(ge=0, le=432000)


class PoirotSecretManagerArn(
    RootModel[
        constr(
            pattern=r'arn:([a-z\d-]+):.*:.*:secret:AmazonLookoutMetrics-.+',
            max_length=256,
        )
    ]
):
    root: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:secret:AmazonLookoutMetrics-.+', max_length=256
    )


class PutFeedbackResponse(BaseModel):
    pass


class QuoteSymbol(RootModel[constr(pattern=r'[^\r\n]|^$', max_length=1)]):
    root: constr(pattern=r'[^\r\n]|^$', max_length=1)


class RDSDatabaseIdentifier(
    RootModel[
        constr(
            pattern=r'^[a-zA-Z](?!.*--)(?!.*-$)[0-9a-zA-Z\-]*$',
            min_length=1,
            max_length=63,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^[a-zA-Z](?!.*--)(?!.*-$)[0-9a-zA-Z\-]*$', min_length=1, max_length=63
    )


class RDSDatabaseName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.]+', min_length=1, max_length=64)


class RedshiftClusterIdentifier(
    RootModel[
        constr(
            pattern=r'^[a-z](?!.*--)(?!.*-$)[0-9a-z\-]*$', min_length=1, max_length=63
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^[a-z](?!.*--)(?!.*-$)[0-9a-z\-]*$', min_length=1, max_length=63
    )


class RedshiftDatabaseName(
    RootModel[constr(pattern=r'[a-zA-Z0-9_.]+', min_length=1, max_length=100)]
):
    root: constr(pattern=r'[a-zA-Z0-9_.]+', min_length=1, max_length=100)


class RelatedColumnName(
    RootModel[constr(pattern=r'.*\S.*', min_length=1, max_length=256)]
):
    root: constr(pattern=r'.*\S.*', min_length=1, max_length=256)


class RelationshipType(Enum):
    CAUSE_OF_INPUT_ANOMALY_GROUP = 'CAUSE_OF_INPUT_ANOMALY_GROUP'
    EFFECT_OF_INPUT_ANOMALY_GROUP = 'EFFECT_OF_INPUT_ANOMALY_GROUP'


class ResourceNotFoundException(RootModel[Any]):
    root: Any


class SampleRow(RootModel[List[DataItem]]):
    root: List[DataItem]


class SampleRows(RootModel[List[SampleRow]]):
    root: List[SampleRow]


class Score(RootModel[confloat(ge=0.0, le=100.0)]):
    root: confloat(ge=0.0, le=100.0)


class SecurityGroupId(
    RootModel[constr(pattern=r'[-0-9a-zA-Z]+', min_length=1, max_length=255)]
):
    root: constr(pattern=r'[-0-9a-zA-Z]+', min_length=1, max_length=255)


class SecurityGroupIdList(RootModel[List[SecurityGroupId]]):
    root: List[SecurityGroupId]


class SensitivityThreshold(RootModel[conint(ge=0, le=100)]):
    root: conint(ge=0, le=100)


class ServiceQuotaExceededException(RootModel[Any]):
    root: Any


class SnsFormat(Enum):
    LONG_TEXT = 'LONG_TEXT'
    SHORT_TEXT = 'SHORT_TEXT'
    JSON = 'JSON'


class StringAttributeValue(RootModel[str]):
    root: str


class StringListAttributeValue(RootModel[List[StringAttributeValue]]):
    root: List[StringAttributeValue]


class SubnetId(RootModel[constr(pattern=r'[\-0-9a-zA-Z]+', max_length=255)]):
    root: constr(pattern=r'[\-0-9a-zA-Z]+', max_length=255)


class SubnetIdList(RootModel[List[SubnetId]]):
    root: List[SubnetId]


class TableName(
    RootModel[constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_.]*$', min_length=1, max_length=100)]
):
    root: constr(pattern=r'^[a-zA-Z][a-zA-Z0-9_.]*$', min_length=1, max_length=100)


class TagKey(RootModel[constr(min_length=1, max_length=128)]):
    root: constr(min_length=1, max_length=128)


class TagKeyList(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class TagResourceResponse(BaseModel):
    pass


class TagValue(RootModel[constr(max_length=256)]):
    root: constr(max_length=256)


class TemplatedPath(
    RootModel[constr(pattern=r'^s3://[a-zA-Z0-9_\-\/ {}=]+$', max_length=1024)]
):
    root: constr(pattern=r'^s3://[a-zA-Z0-9_\-\/ {}=]+$', max_length=1024)


class TemplatedPathList(RootModel[List[TemplatedPath]]):
    root: List[TemplatedPath] = Field(..., max_length=1, min_length=1)


class TimeSeriesId(RootModel[constr(pattern=r'.*\S.*', max_length=520)]):
    root: constr(pattern=r'.*\S.*', max_length=520)


class Timestamp(RootModel[datetime]):
    root: datetime


class TimestampColumn(BaseModel):
    ColumnFormat: Optional[DateTimeFormat] = None
    ColumnName_1: Optional[ColumnName] = Field(None, alias='ColumnName')


class TimestampString(
    RootModel[
        constr(
            pattern=r'^([12]\d{3})-(1[0-2]|0[1-9])-(0[1-9]|[12]\d|3[01])T([01]\d|2[0-3]):([0-5]\d):([0-5]\d)(Z|(\+|\-)(0\d|1[0-2]):([0-5]\d)(\[[[:alnum:]\/\_]+\])?)$',
            max_length=60,
        )
    ]
):
    root: constr(
        pattern=r'^([12]\d{3})-(1[0-2]|0[1-9])-(0[1-9]|[12]\d|3[01])T([01]\d|2[0-3]):([0-5]\d):([0-5]\d)(Z|(\+|\-)(0\d|1[0-2]):([0-5]\d)(\[[[:alnum:]\/\_]+\])?)$',
        max_length=60,
    )


class Timezone(RootModel[constr(pattern=r'.*\S.*', max_length=60)]):
    root: constr(pattern=r'.*\S.*', max_length=60)


class TooManyRequestsException(RootModel[Any]):
    root: Any


class UUID(
    RootModel[
        constr(
            pattern=r'[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
            max_length=63,
        )
    ]
):
    root: constr(
        pattern=r'[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
        max_length=63,
    )


class UntagResourceRequest(BaseModel):
    pass


class UntagResourceResponse(BaseModel):
    pass


class UpdateAlertResponse(BaseModel):
    AlertArn: Optional[Arn] = None


class UpdateAnomalyDetectorResponse(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None


class UpdateMetricSetResponse(BaseModel):
    MetricSetArn: Optional[Arn] = None


class ValidationException(RootModel[Any]):
    root: Any


class VpcConfiguration(BaseModel):
    SecurityGroupIdList_1: SecurityGroupIdList = Field(..., alias='SecurityGroupIdList')
    SubnetIdList_1: SubnetIdList = Field(..., alias='SubnetIdList')


class ActivateAnomalyDetectorPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(..., description='The ARN of the anomaly detector.')


class BackTestAnomalyDetectorPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the anomaly detector.'
    )


class AnomalyDetectorConfig(BaseModel):
    AnomalyDetectorFrequency: Optional[Frequency] = None


class CreateAnomalyDetectorPostRequest(BaseModel):
    AnomalyDetectorConfig_1: AnomalyDetectorConfig = Field(
        ...,
        alias='AnomalyDetectorConfig',
        description="Contains information about a detector's configuration.",
    )
    AnomalyDetectorDescription: Optional[
        constr(pattern=r'.*\S.*', min_length=1, max_length=256)
    ] = Field(None, description='A description of the detector.')
    AnomalyDetectorName: constr(
        pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63
    ) = Field(..., description='The name of the detector.')
    KmsKeyArn: Optional[
        constr(
            pattern=r'arn:aws.*:kms:.*:[0-9]{12}:key/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
            min_length=20,
            max_length=2048,
        )
    ] = Field(None, description='The ARN of the KMS key to use to encrypt your data.')
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the anomaly detector.',
    )


class MetricSetFrequency(Enum):
    P1D = 'P1D'
    PT1H = 'PT1H'
    PT10M = 'PT10M'
    PT5M = 'PT5M'


class DeactivateAnomalyDetectorPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the anomaly detector.'
    )


class DeleteAlertPostRequest(BaseModel):
    AlertArn: constr(pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256) = Field(
        ..., description='The ARN of the alert to delete.'
    )


class DeleteAnomalyDetectorPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(..., description='The ARN of the detector to delete.')


class DescribeAlertPostRequest(BaseModel):
    AlertArn: constr(pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256) = Field(
        ..., description='The ARN of the alert to describe.'
    )


class DescribeAnomalyDetectionExecutionsPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the anomaly detector.'
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The number of items to return in the response.'
    )
    NextToken: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=3000)] = (
        Field(
            None,
            description="Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
        )
    )
    Timestamp: Optional[
        constr(
            pattern=r'^([12]\d{3})-(1[0-2]|0[1-9])-(0[1-9]|[12]\d|3[01])T([01]\d|2[0-3]):([0-5]\d):([0-5]\d)(Z|(\+|\-)(0\d|1[0-2]):([0-5]\d)(\[[[:alnum:]\/\_]+\])?)$',
            max_length=60,
        )
    ] = Field(None, description='The timestamp of the anomaly detection job.')


class DescribeAnomalyDetectorPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(..., description='The ARN of the detector to describe.')


class DescribeMetricSetPostRequest(BaseModel):
    MetricSetArn: constr(pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256) = (
        Field(..., description='The ARN of the dataset.')
    )


class GetAnomalyGroupPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the anomaly detector.'
    )
    AnomalyGroupId: constr(
        pattern=r'[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
        max_length=63,
    ) = Field(..., description='The ID of the anomaly group.')


class GetDataQualityMetricsPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ...,
        description='The Amazon Resource Name (ARN) of the anomaly detector that you want to investigate.',
    )
    MetricSetArn: Optional[
        constr(pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256)
    ] = Field(
        None,
        description='The Amazon Resource Name (ARN) of a specific data quality metric set.',
    )


class AnomalyGroupTimeSeriesFeedback1(BaseModel):
    AnomalyGroupId: Optional[UUID] = None
    TimeSeriesId_1: Optional[TimeSeriesId] = Field(None, alias='TimeSeriesId')


class GetFeedbackPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the anomaly detector.'
    )
    AnomalyGroupTimeSeriesFeedback: AnomalyGroupTimeSeriesFeedback1 = Field(
        ..., description='An anomalous metric in an anomaly group.'
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to return.'
    )
    NextToken: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=3000)] = (
        Field(
            None,
            description="Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
        )
    )


class ListAlertsPostRequest(BaseModel):
    AnomalyDetectorArn: Optional[
        constr(pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256)
    ] = Field(None, description="The ARN of the alert's detector.")
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None,
        description='The maximum number of results that will be displayed by the request.',
    )
    NextToken: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=3000)] = (
        Field(
            None,
            description='If the result of the previous request is truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.',
        )
    )


class ListAnomalyDetectorsPostRequest(BaseModel):
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to return.'
    )
    NextToken: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=3000)] = (
        Field(
            None,
            description='If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.',
        )
    )


class RelationshipTypeFilter(Enum):
    CAUSE_OF_INPUT_ANOMALY_GROUP = 'CAUSE_OF_INPUT_ANOMALY_GROUP'
    EFFECT_OF_INPUT_ANOMALY_GROUP = 'EFFECT_OF_INPUT_ANOMALY_GROUP'


class ListAnomalyGroupRelatedMetricsPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the anomaly detector.'
    )
    AnomalyGroupId: constr(
        pattern=r'[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
        max_length=63,
    ) = Field(..., description='The ID of the anomaly group.')
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to return.'
    )
    NextToken: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=3000)] = (
        Field(
            None,
            description="Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
        )
    )
    RelationshipTypeFilter_1: Optional[RelationshipTypeFilter] = Field(
        None,
        alias='RelationshipTypeFilter',
        description='Filter for potential causes (<code>CAUSE_OF_INPUT_ANOMALY_GROUP</code>) or downstream effects (<code>EFFECT_OF_INPUT_ANOMALY_GROUP</code>) of the anomaly group.',
    )


class ListAnomalyGroupSummariesPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the anomaly detector.'
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to return.'
    )
    NextToken: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=3000)] = (
        Field(
            None,
            description="Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
        )
    )
    SensitivityThreshold: conint(ge=0, le=100) = Field(
        ..., description='The minimum severity score for inclusion in the output.'
    )


class ListAnomalyGroupTimeSeriesPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the anomaly detector.'
    )
    AnomalyGroupId: constr(
        pattern=r'[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
        max_length=63,
    ) = Field(..., description='The ID of the anomaly group.')
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to return.'
    )
    MetricName: constr(pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', max_length=256) = Field(
        ..., description='The name of the measure field.'
    )
    NextToken: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=3000)] = (
        Field(
            None,
            description="Specify the pagination token that's returned by a previous request to retrieve the next page of results.",
        )
    )


class ListMetricSetsPostRequest(BaseModel):
    AnomalyDetectorArn: Optional[
        constr(pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256)
    ] = Field(
        None,
        description='The ARN of the anomaly detector containing the metrics sets to list.',
    )
    MaxResults: Optional[conint(ge=1, le=100)] = Field(
        None, description='The maximum number of results to return.'
    )
    NextToken: Optional[constr(pattern=r'.*\S.*', min_length=1, max_length=3000)] = (
        Field(
            None,
            description='If the result of the previous request was truncated, the response includes a <code>NextToken</code>. To retrieve the next set of results, use the token in the next request. Tokens expire after 24 hours.',
        )
    )


class AnomalyGroupTimeSeriesFeedback2(BaseModel):
    AnomalyGroupId: Optional[UUID] = None
    IsAnomaly: Optional[Boolean] = None
    TimeSeriesId_1: Optional[TimeSeriesId] = Field(None, alias='TimeSeriesId')


class PutFeedbackPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The Amazon Resource Name (ARN) of the anomaly detector.'
    )
    AnomalyGroupTimeSeriesFeedback: AnomalyGroupTimeSeriesFeedback2 = Field(
        ..., description='Feedback for an anomalous metric.'
    )


class UpdateAnomalyDetectorPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(..., description='The ARN of the detector to update.')
    AnomalyDetectorConfig_1: Optional[AnomalyDetectorConfig] = Field(
        None,
        alias='AnomalyDetectorConfig',
        description="Contains information about a detector's configuration.",
    )
    AnomalyDetectorDescription: Optional[
        constr(pattern=r'.*\S.*', min_length=1, max_length=256)
    ] = Field(None, description='The updated detector description.')
    KmsKeyArn: Optional[
        constr(
            pattern=r'arn:aws.*:kms:.*:[0-9]{12}:key/[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}',
            min_length=20,
            max_length=2048,
        )
    ] = Field(
        None, description='The Amazon Resource Name (ARN) of an AWS KMS encryption key.'
    )


class TagsResourceArnPostRequest(BaseModel):
    tags: Dict[str, TagValue] = Field(
        ...,
        description='Tags to apply to the resource. Tag keys and values can contain letters, numbers, spaces, and the following symbols: <code>_.:/=+@-</code> ',
    )


class TagKeys(RootModel[List[TagKey]]):
    root: List[TagKey] = Field(..., max_length=50, min_length=1)


class ActivateAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn


class AnomalyDetectorConfigSummary(BaseModel):
    AnomalyDetectorFrequency: Optional[Frequency] = None


class AnomalyGroupStatistics(BaseModel):
    EvaluationStartDate: Optional[TimestampString] = None
    ItemizedMetricStatsList_1: Optional[ItemizedMetricStatsList] = Field(
        None, alias='ItemizedMetricStatsList'
    )
    TotalCount: Optional[Integer] = None


class AnomalyGroupSummary(BaseModel):
    AnomalyGroupId: Optional[UUID] = None
    AnomalyGroupScore: Optional[Score] = None
    EndTime: Optional[TimestampString] = None
    PrimaryMetricName: Optional[MetricName] = None
    StartTime: Optional[TimestampString] = None


class AnomalyGroupSummaryList(RootModel[List[AnomalyGroupSummary]]):
    root: List[AnomalyGroupSummary]


class AnomalyGroupTimeSeries(BaseModel):
    AnomalyGroupId: UUID
    TimeSeriesId_1: Optional[TimeSeriesId] = Field(None, alias='TimeSeriesId')


class AnomalyGroupTimeSeriesFeedback(BaseModel):
    AnomalyGroupId: UUID
    IsAnomaly: Boolean
    TimeSeriesId_1: TimeSeriesId = Field(..., alias='TimeSeriesId')


class AppFlowConfig(BaseModel):
    FlowName_1: Optional[FlowName] = Field(None, alias='FlowName')
    RoleArn: Optional[Arn] = None


class AttributeValue(BaseModel):
    B: Optional[BinaryAttributeValue] = None
    BS: Optional[BinaryListAttributeValue] = None
    N: Optional[NumberAttributeValue] = None
    NS: Optional[NumberListAttributeValue] = None
    S: Optional[StringAttributeValue] = None
    SS: Optional[StringListAttributeValue] = None


class AutoDetectionS3SourceConfig(BaseModel):
    HistoricalDataPathList_1: Optional[HistoricalDataPathList] = Field(
        None, alias='HistoricalDataPathList'
    )
    TemplatedPathList_1: Optional[TemplatedPathList] = Field(
        None, alias='TemplatedPathList'
    )


class BackTestConfiguration(BaseModel):
    RunBackTestMode: Boolean


class CloudWatchConfig(BaseModel):
    BackTestConfiguration_1: Optional[BackTestConfiguration] = Field(
        None, alias='BackTestConfiguration'
    )
    RoleArn: Optional[Arn] = None


class CsvFormatDescriptor(BaseModel):
    Charset_1: Optional[Charset] = Field(None, alias='Charset')
    ContainsHeader: Optional[Boolean] = None
    Delimiter_1: Optional[Delimiter] = Field(None, alias='Delimiter')
    FileCompression: Optional[CSVFileCompression] = None
    HeaderList_1: Optional[HeaderList] = Field(None, alias='HeaderList')
    QuoteSymbol_1: Optional[QuoteSymbol] = Field(None, alias='QuoteSymbol')


class DataQualityMetric(BaseModel):
    MetricDescription: Optional[DataQualityMetricDescription] = None
    MetricType: Optional[DataQualityMetricType] = None
    MetricValue: Optional[Double] = None
    RelatedColumnName_1: Optional[RelatedColumnName] = Field(
        None, alias='RelatedColumnName'
    )


class DataQualityMetricList(RootModel[List[DataQualityMetric]]):
    root: List[DataQualityMetric]


class DescribeAnomalyDetectionExecutionsRequest(BaseModel):
    AnomalyDetectorArn: Arn
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    Timestamp: Optional[TimestampString] = None


class DescribeAnomalyDetectorResponse(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None
    AnomalyDetectorConfig: Optional[AnomalyDetectorConfigSummary] = None
    AnomalyDetectorDescription_1: Optional[AnomalyDetectorDescription] = Field(
        None, alias='AnomalyDetectorDescription'
    )
    AnomalyDetectorName_1: Optional[AnomalyDetectorName] = Field(
        None, alias='AnomalyDetectorName'
    )
    CreationTime: Optional[Timestamp] = None
    FailureReason: Optional[ErrorMessage] = None
    FailureType: Optional[AnomalyDetectorFailureType] = None
    KmsKeyArn_1: Optional[KmsKeyArn] = Field(None, alias='KmsKeyArn')
    LastModificationTime: Optional[Timestamp] = None
    Status: Optional[AnomalyDetectorStatus] = None


class DetectedField(BaseModel):
    Confidence_1: Optional[Confidence] = Field(None, alias='Confidence')
    Message_1: Optional[Message] = Field(None, alias='Message')
    Value: Optional[AttributeValue] = None


class DetectedJsonFormatDescriptor(BaseModel):
    Charset: Optional[DetectedField] = None
    FileCompression: Optional[DetectedField] = None


class DimensionFilter(BaseModel):
    DimensionName: Optional[ColumnName] = None
    DimensionValueList_1: Optional[DimensionValueList] = Field(
        None, alias='DimensionValueList'
    )


class DimensionFilterList(RootModel[List[DimensionFilter]]):
    root: List[DimensionFilter] = Field(..., max_length=5, min_length=1)


class DimensionNameValue(BaseModel):
    DimensionName: ColumnName
    DimensionValue_1: DimensionValue = Field(..., alias='DimensionValue')


class DimensionNameValueList(RootModel[List[DimensionNameValue]]):
    root: List[DimensionNameValue]


class DimensionValueContribution(BaseModel):
    ContributionScore: Optional[Score] = None
    DimensionValue_1: Optional[DimensionValue] = Field(None, alias='DimensionValue')


class DimensionValueContributionList(RootModel[List[DimensionValueContribution]]):
    root: List[DimensionValueContribution]


class ExecutionStatus(BaseModel):
    FailureReason: Optional[AnomalyDetectionTaskStatusMessage] = None
    Status: Optional[AnomalyDetectionTaskStatus] = None
    Timestamp: Optional[TimestampString] = None


class FileFormatDescriptor(BaseModel):
    CsvFormatDescriptor_1: Optional[CsvFormatDescriptor] = Field(
        None, alias='CsvFormatDescriptor'
    )
    JsonFormatDescriptor_1: Optional[JsonFormatDescriptor] = Field(
        None, alias='JsonFormatDescriptor'
    )


class Filter(BaseModel):
    DimensionValue_1: Optional[DimensionValue] = Field(None, alias='DimensionValue')
    FilterOperation_1: Optional[FilterOperation] = Field(None, alias='FilterOperation')


class FilterList(RootModel[List[Filter]]):
    root: List[Filter] = Field(..., min_length=1)


class GetAnomalyGroupRequest(BaseModel):
    AnomalyDetectorArn: Arn
    AnomalyGroupId: UUID


class GetFeedbackRequest(BaseModel):
    AnomalyDetectorArn: Arn
    AnomalyGroupTimeSeriesFeedback: AnomalyGroupTimeSeries
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetSampleDataResponse(BaseModel):
    HeaderValues: Optional[HeaderValueList] = None
    SampleRows_1: Optional[SampleRows] = Field(None, alias='SampleRows')


class InterMetricImpactDetails(BaseModel):
    AnomalyGroupId: Optional[UUID] = None
    ContributionPercentage: Optional[MetricChangePercentage] = None
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    RelationshipType_1: Optional[RelationshipType] = Field(
        None, alias='RelationshipType'
    )


class InterMetricImpactList(RootModel[List[InterMetricImpactDetails]]):
    root: List[InterMetricImpactDetails]


class ListAlertsRequest(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAnomalyDetectorsRequest(BaseModel):
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAnomalyGroupRelatedMetricsRequest(BaseModel):
    AnomalyDetectorArn: Arn
    AnomalyGroupId: UUID
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    RelationshipTypeFilter: Optional[RelationshipType] = None


class ListAnomalyGroupRelatedMetricsResponse(BaseModel):
    InterMetricImpactList_1: Optional[InterMetricImpactList] = Field(
        None, alias='InterMetricImpactList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAnomalyGroupSummariesRequest(BaseModel):
    AnomalyDetectorArn: Arn
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    SensitivityThreshold_1: SensitivityThreshold = Field(
        ..., alias='SensitivityThreshold'
    )


class ListAnomalyGroupSummariesResponse(BaseModel):
    AnomalyGroupStatistics_1: Optional[AnomalyGroupStatistics] = Field(
        None, alias='AnomalyGroupStatistics'
    )
    AnomalyGroupSummaryList_1: Optional[AnomalyGroupSummaryList] = Field(
        None, alias='AnomalyGroupSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAnomalyGroupTimeSeriesRequest(BaseModel):
    AnomalyDetectorArn: Arn
    AnomalyGroupId: UUID
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    MetricName_1: MetricName = Field(..., alias='MetricName')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListMetricSetsRequest(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None
    MaxResults_1: Optional[MaxResults] = Field(None, alias='MaxResults')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class Metric(BaseModel):
    AggregationFunction_1: AggregationFunction = Field(..., alias='AggregationFunction')
    MetricName: ColumnName
    Namespace_1: Optional[Namespace] = Field(None, alias='Namespace')


class MetricList(RootModel[List[Metric]]):
    root: List[Metric] = Field(..., min_length=1)


class MetricSetDataQualityMetric(BaseModel):
    DataQualityMetricList_1: Optional[DataQualityMetricList] = Field(
        None, alias='DataQualityMetricList'
    )
    MetricSetArn: Optional[Arn] = None


class MetricSetDataQualityMetricList(RootModel[List[MetricSetDataQualityMetric]]):
    root: List[MetricSetDataQualityMetric]


class MetricSetDimensionFilter(BaseModel):
    FilterList_1: Optional[FilterList] = Field(None, alias='FilterList')
    Name: Optional[ColumnName] = None


class MetricSetDimensionFilterList(RootModel[List[MetricSetDimensionFilter]]):
    root: List[MetricSetDimensionFilter]


class PutFeedbackRequest(BaseModel):
    AnomalyDetectorArn: Arn
    AnomalyGroupTimeSeriesFeedback_1: AnomalyGroupTimeSeriesFeedback = Field(
        ..., alias='AnomalyGroupTimeSeriesFeedback'
    )


class RDSSourceConfig(BaseModel):
    DBInstanceIdentifier: Optional[RDSDatabaseIdentifier] = None
    DatabaseHost_1: Optional[DatabaseHost] = Field(None, alias='DatabaseHost')
    DatabaseName: Optional[RDSDatabaseName] = None
    DatabasePort_1: Optional[DatabasePort] = Field(None, alias='DatabasePort')
    RoleArn: Optional[Arn] = None
    SecretManagerArn: Optional[PoirotSecretManagerArn] = None
    TableName_1: Optional[TableName] = Field(None, alias='TableName')
    VpcConfiguration_1: Optional[VpcConfiguration] = Field(
        None, alias='VpcConfiguration'
    )


class RedshiftSourceConfig(BaseModel):
    ClusterIdentifier: Optional[RedshiftClusterIdentifier] = None
    DatabaseHost_1: Optional[DatabaseHost] = Field(None, alias='DatabaseHost')
    DatabaseName: Optional[RedshiftDatabaseName] = None
    DatabasePort_1: Optional[DatabasePort] = Field(None, alias='DatabasePort')
    RoleArn: Optional[Arn] = None
    SecretManagerArn: Optional[PoirotSecretManagerArn] = None
    TableName_1: Optional[TableName] = Field(None, alias='TableName')
    VpcConfiguration_1: Optional[VpcConfiguration] = Field(
        None, alias='VpcConfiguration'
    )


class S3SourceConfig(BaseModel):
    FileFormatDescriptor_1: Optional[FileFormatDescriptor] = Field(
        None, alias='FileFormatDescriptor'
    )
    HistoricalDataPathList_1: Optional[HistoricalDataPathList] = Field(
        None, alias='HistoricalDataPathList'
    )
    RoleArn: Optional[Arn] = None
    TemplatedPathList_1: Optional[TemplatedPathList] = Field(
        None, alias='TemplatedPathList'
    )


class SNSConfiguration(BaseModel):
    RoleArn: Arn
    SnsFormat_1: Optional[SnsFormat] = Field(None, alias='SnsFormat')
    SnsTopicArn: Arn


class SampleDataS3SourceConfig(BaseModel):
    FileFormatDescriptor_1: FileFormatDescriptor = Field(
        ..., alias='FileFormatDescriptor'
    )
    HistoricalDataPathList_1: Optional[HistoricalDataPathList] = Field(
        None, alias='HistoricalDataPathList'
    )
    RoleArn: Arn
    TemplatedPathList_1: Optional[TemplatedPathList] = Field(
        None, alias='TemplatedPathList'
    )


class TagMap(RootModel[Optional[Dict[str, TagValue]]]):
    root: Optional[Dict[str, TagValue]] = None


class TagResourceRequest(BaseModel):
    Tags: TagMap


class TimeSeries(BaseModel):
    DimensionList: DimensionNameValueList
    MetricValueList_1: MetricValueList = Field(..., alias='MetricValueList')
    TimeSeriesId_1: TimeSeriesId = Field(..., alias='TimeSeriesId')


class TimeSeriesFeedback(BaseModel):
    IsAnomaly: Optional[Boolean] = None
    TimeSeriesId_1: Optional[TimeSeriesId] = Field(None, alias='TimeSeriesId')


class TimeSeriesFeedbackList(RootModel[List[TimeSeriesFeedback]]):
    root: List[TimeSeriesFeedback]


class TimeSeriesList(RootModel[List[TimeSeries]]):
    root: List[TimeSeries]


class TimestampList(RootModel[List[TimestampString]]):
    root: List[TimestampString]


class UpdateAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorArn: Arn
    AnomalyDetectorConfig_1: Optional[AnomalyDetectorConfig] = Field(
        None, alias='AnomalyDetectorConfig'
    )
    AnomalyDetectorDescription_1: Optional[AnomalyDetectorDescription] = Field(
        None, alias='AnomalyDetectorDescription'
    )
    KmsKeyArn_1: Optional[KmsKeyArn] = Field(None, alias='KmsKeyArn')


class Action(BaseModel):
    LambdaConfiguration_1: Optional[LambdaConfiguration] = Field(
        None, alias='LambdaConfiguration'
    )
    SNSConfiguration_1: Optional[SNSConfiguration] = Field(
        None, alias='SNSConfiguration'
    )


class AlertFilters(BaseModel):
    DimensionFilterList_1: Optional[DimensionFilterList] = Field(
        None, alias='DimensionFilterList'
    )
    MetricList: Optional[MetricNameList] = None


class CreateAlertPostRequest(BaseModel):
    Action_1: Action = Field(
        ...,
        alias='Action',
        description='A configuration that specifies the action to perform when anomalies are detected.',
    )
    AlertDescription: Optional[constr(pattern=r'.*\S.*', max_length=256)] = Field(
        None, description='A description of the alert.'
    )
    AlertFilters_1: Optional[AlertFilters] = Field(
        None,
        alias='AlertFilters',
        description='The configuration of the alert filters.',
    )
    AlertName: constr(
        pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63
    ) = Field(..., description='The name of the alert.')
    AlertSensitivityThreshold: Optional[conint(ge=0, le=100)] = Field(
        None,
        description='An integer from 0 to 100 specifying the alert sensitivity threshold.',
    )
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The ARN of the detector to which the alert is attached.'
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the alert.',
    )


class AutoDetectionMetricSource(BaseModel):
    S3SourceConfig: Optional[AutoDetectionS3SourceConfig] = None


class DetectMetricSetConfigPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(..., description='An anomaly detector ARN.')
    AutoDetectionMetricSource_1: AutoDetectionMetricSource = Field(
        ...,
        alias='AutoDetectionMetricSource',
        description='An auto detection metric source.',
    )


class GetSampleDataPostRequest(BaseModel):
    S3SourceConfig_1: Optional[S3SourceConfig] = Field(
        None,
        alias='S3SourceConfig',
        description='Contains information about the source configuration in Amazon S3.',
    )


class UpdateAlertPostRequest(BaseModel):
    Action_1: Optional[Action] = Field(
        None,
        alias='Action',
        description='A configuration that specifies the action to perform when anomalies are detected.',
    )
    AlertArn: constr(pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256) = Field(
        ..., description='The ARN of the alert to update.'
    )
    AlertDescription: Optional[constr(pattern=r'.*\S.*', max_length=256)] = Field(
        None, description='A description of the alert.'
    )
    AlertFilters_1: Optional[AlertFilters] = Field(
        None,
        alias='AlertFilters',
        description='The configuration of the alert filters.',
    )
    AlertSensitivityThreshold: Optional[conint(ge=0, le=100)] = Field(
        None,
        description='An integer from 0 to 100 specifying the alert sensitivity threshold.',
    )


class AlertSummary(BaseModel):
    AlertArn: Optional[Arn] = None
    AlertName_1: Optional[AlertName] = Field(None, alias='AlertName')
    AlertSensitivityThreshold: Optional[SensitivityThreshold] = None
    AlertStatus_1: Optional[AlertStatus] = Field(None, alias='AlertStatus')
    AlertType_1: Optional[AlertType] = Field(None, alias='AlertType')
    AnomalyDetectorArn: Optional[Arn] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None
    Tags: Optional[TagMap] = None


class AlertSummaryList(RootModel[List[AlertSummary]]):
    root: List[AlertSummary]


class AnomalyDetectorDataQualityMetric(BaseModel):
    MetricSetDataQualityMetricList_1: Optional[MetricSetDataQualityMetricList] = Field(
        None, alias='MetricSetDataQualityMetricList'
    )
    StartTimestamp: Optional[Timestamp] = None


class AnomalyDetectorDataQualityMetricList(
    RootModel[List[AnomalyDetectorDataQualityMetric]]
):
    root: List[AnomalyDetectorDataQualityMetric]


class AnomalyDetectorSummary(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None
    AnomalyDetectorDescription_1: Optional[AnomalyDetectorDescription] = Field(
        None, alias='AnomalyDetectorDescription'
    )
    AnomalyDetectorName_1: Optional[AnomalyDetectorName] = Field(
        None, alias='AnomalyDetectorName'
    )
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None
    Status: Optional[AnomalyDetectorStatus] = None
    Tags: Optional[TagMap] = None


class AnomalyDetectorSummaryList(RootModel[List[AnomalyDetectorSummary]]):
    root: List[AnomalyDetectorSummary]


class AthenaSourceConfig(BaseModel):
    BackTestConfiguration_1: Optional[BackTestConfiguration] = Field(
        None, alias='BackTestConfiguration'
    )
    DataCatalog: Optional[AthenaDataCatalog] = None
    DatabaseName: Optional[AthenaDatabaseName] = None
    RoleArn: Optional[Arn] = None
    S3ResultsPath: Optional[AthenaS3ResultsPath] = None
    TableName: Optional[AthenaTableName] = None
    WorkGroupName: Optional[AthenaWorkGroupName] = None


class CreateAlertRequest(BaseModel):
    Action_1: Action = Field(..., alias='Action')
    AlertDescription_1: Optional[AlertDescription] = Field(
        None, alias='AlertDescription'
    )
    AlertFilters_1: Optional[AlertFilters] = Field(None, alias='AlertFilters')
    AlertName_1: AlertName = Field(..., alias='AlertName')
    AlertSensitivityThreshold: Optional[SensitivityThreshold] = None
    AnomalyDetectorArn: Arn
    Tags: Optional[TagMap] = None


class CreateAnomalyDetectorRequest(BaseModel):
    AnomalyDetectorConfig_1: AnomalyDetectorConfig = Field(
        ..., alias='AnomalyDetectorConfig'
    )
    AnomalyDetectorDescription_1: Optional[AnomalyDetectorDescription] = Field(
        None, alias='AnomalyDetectorDescription'
    )
    AnomalyDetectorName_1: AnomalyDetectorName = Field(..., alias='AnomalyDetectorName')
    KmsKeyArn_1: Optional[KmsKeyArn] = Field(None, alias='KmsKeyArn')
    Tags: Optional[TagMap] = None


class DetectMetricSetConfigRequest(BaseModel):
    AnomalyDetectorArn: Arn
    AutoDetectionMetricSource_1: AutoDetectionMetricSource = Field(
        ..., alias='AutoDetectionMetricSource'
    )


class DetectedCsvFormatDescriptor(BaseModel):
    Charset: Optional[DetectedField] = None
    ContainsHeader: Optional[DetectedField] = None
    Delimiter: Optional[DetectedField] = None
    FileCompression: Optional[DetectedField] = None
    HeaderList: Optional[DetectedField] = None
    QuoteSymbol: Optional[DetectedField] = None


class DetectedFileFormatDescriptor(BaseModel):
    CsvFormatDescriptor: Optional[DetectedCsvFormatDescriptor] = None
    JsonFormatDescriptor: Optional[DetectedJsonFormatDescriptor] = None


class DetectedS3SourceConfig(BaseModel):
    FileFormatDescriptor: Optional[DetectedFileFormatDescriptor] = None


class DimensionContribution(BaseModel):
    DimensionName: Optional[ColumnName] = None
    DimensionValueContributionList_1: Optional[DimensionValueContributionList] = Field(
        None, alias='DimensionValueContributionList'
    )


class DimensionContributionList(RootModel[List[DimensionContribution]]):
    root: List[DimensionContribution]


class ExecutionList(RootModel[List[ExecutionStatus]]):
    root: List[ExecutionStatus]


class GetDataQualityMetricsResponse(BaseModel):
    AnomalyDetectorDataQualityMetricList_1: Optional[
        AnomalyDetectorDataQualityMetricList
    ] = Field(None, alias='AnomalyDetectorDataQualityMetricList')


class GetFeedbackResponse(BaseModel):
    AnomalyGroupTimeSeriesFeedback: Optional[TimeSeriesFeedbackList] = None
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class GetSampleDataRequest(BaseModel):
    S3SourceConfig: Optional[SampleDataS3SourceConfig] = None


class ListAlertsResponse(BaseModel):
    AlertSummaryList_1: Optional[AlertSummaryList] = Field(
        None, alias='AlertSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAnomalyDetectorsResponse(BaseModel):
    AnomalyDetectorSummaryList_1: Optional[AnomalyDetectorSummaryList] = Field(
        None, alias='AnomalyDetectorSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class ListAnomalyGroupTimeSeriesResponse(BaseModel):
    AnomalyGroupId: Optional[UUID] = None
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')
    TimeSeriesList_1: Optional[TimeSeriesList] = Field(None, alias='TimeSeriesList')
    TimestampList_1: Optional[TimestampList] = Field(None, alias='TimestampList')


class ListTagsForResourceResponse(BaseModel):
    Tags: Optional[TagMap] = None


class MetricSetSummary(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None
    MetricSetArn: Optional[Arn] = None
    MetricSetDescription_1: Optional[MetricSetDescription] = Field(
        None, alias='MetricSetDescription'
    )
    MetricSetName_1: Optional[MetricSetName] = Field(None, alias='MetricSetName')
    Tags: Optional[TagMap] = None


class MetricSetSummaryList(RootModel[List[MetricSetSummary]]):
    root: List[MetricSetSummary]


class MetricSource(BaseModel):
    AppFlowConfig_1: Optional[AppFlowConfig] = Field(None, alias='AppFlowConfig')
    AthenaSourceConfig_1: Optional[AthenaSourceConfig] = Field(
        None, alias='AthenaSourceConfig'
    )
    CloudWatchConfig_1: Optional[CloudWatchConfig] = Field(
        None, alias='CloudWatchConfig'
    )
    RDSSourceConfig_1: Optional[RDSSourceConfig] = Field(None, alias='RDSSourceConfig')
    RedshiftSourceConfig_1: Optional[RedshiftSourceConfig] = Field(
        None, alias='RedshiftSourceConfig'
    )
    S3SourceConfig_1: Optional[S3SourceConfig] = Field(None, alias='S3SourceConfig')


class UpdateAlertRequest(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    AlertArn: Arn
    AlertDescription_1: Optional[AlertDescription] = Field(
        None, alias='AlertDescription'
    )
    AlertFilters_1: Optional[AlertFilters] = Field(None, alias='AlertFilters')
    AlertSensitivityThreshold: Optional[SensitivityThreshold] = None


class UpdateMetricSetRequest(BaseModel):
    DimensionFilterList: Optional[MetricSetDimensionFilterList] = None
    DimensionList_1: Optional[DimensionList] = Field(None, alias='DimensionList')
    MetricList_1: Optional[MetricList] = Field(None, alias='MetricList')
    MetricSetArn: Arn
    MetricSetDescription_1: Optional[MetricSetDescription] = Field(
        None, alias='MetricSetDescription'
    )
    MetricSetFrequency: Optional[Frequency] = None
    MetricSource_1: Optional[MetricSource] = Field(None, alias='MetricSource')
    Offset_1: Optional[Offset] = Field(None, alias='Offset')
    TimestampColumn_1: Optional[TimestampColumn] = Field(None, alias='TimestampColumn')


class CreateMetricSetPostRequest(BaseModel):
    AnomalyDetectorArn: constr(
        pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256
    ) = Field(
        ..., description='The ARN of the anomaly detector that will use the dataset.'
    )
    DimensionFilterList: Optional[List[MetricSetDimensionFilter]] = Field(
        None,
        description='A list of filters that specify which data is kept for anomaly detection.',
    )
    DimensionList: Optional[List[ColumnName]] = Field(
        None,
        description='A list of the fields you want to treat as dimensions.',
        min_length=1,
    )
    MetricList: List[Metric] = Field(
        ...,
        description='A list of metrics that the dataset will contain.',
        min_length=1,
    )
    MetricSetDescription: Optional[
        constr(pattern=r'.*\S.*', min_length=1, max_length=256)
    ] = Field(None, description='A description of the dataset you are creating.')
    MetricSetFrequency_1: Optional[MetricSetFrequency] = Field(
        None,
        alias='MetricSetFrequency',
        description='The frequency with which the source data will be analyzed for anomalies.',
    )
    MetricSetName: constr(
        pattern=r'^[a-zA-Z0-9][a-zA-Z0-9\-_]*', min_length=1, max_length=63
    ) = Field(..., description='The name of the dataset.')
    MetricSource_1: MetricSource = Field(
        ...,
        alias='MetricSource',
        description='Contains information about source data used to generate metrics.',
    )
    Offset: Optional[conint(ge=0, le=432000)] = Field(
        None,
        description='After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.',
    )
    Tags: Optional[Dict[str, TagValue]] = Field(
        None,
        description='A list of <a href="https://docs.aws.amazon.com/lookoutmetrics/latest/dev/detectors-tags.html">tags</a> to apply to the dataset.',
    )
    TimestampColumn_1: Optional[TimestampColumn] = Field(
        None,
        alias='TimestampColumn',
        description='Contains information about the column used to track time in a source data file.',
    )
    Timezone: Optional[constr(pattern=r'.*\S.*', max_length=60)] = Field(
        None, description='The time zone in which your source data was recorded.'
    )


class UpdateMetricSetPostRequest(BaseModel):
    DimensionFilterList: Optional[List[MetricSetDimensionFilter]] = Field(
        None,
        description='Describes a list of filters for choosing specific dimensions and specific values. Each filter consists of the dimension and one of its values that you want to include. When multiple dimensions or values are specified, the dimensions are joined with an AND operation and the values are joined with an OR operation.',
    )
    DimensionList: Optional[List[ColumnName]] = Field(
        None, description='The dimension list.', min_length=1
    )
    MetricList: Optional[List[Metric]] = Field(
        None, description='The metric list.', min_length=1
    )
    MetricSetArn: constr(pattern=r'arn:([a-z\d-]+):.*:.*:.*:.+', max_length=256) = (
        Field(..., description='The ARN of the dataset to update.')
    )
    MetricSetDescription: Optional[
        constr(pattern=r'.*\S.*', min_length=1, max_length=256)
    ] = Field(None, description="The dataset's description.")
    MetricSetFrequency_1: Optional[MetricSetFrequency] = Field(
        None, alias='MetricSetFrequency', description="The dataset's interval."
    )
    MetricSource_1: Optional[MetricSource] = Field(
        None,
        alias='MetricSource',
        description='Contains information about source data used to generate metrics.',
    )
    Offset: Optional[conint(ge=0, le=432000)] = Field(
        None,
        description='After an interval ends, the amount of seconds that the detector waits before importing data. Offset is only supported for S3, Redshift, Athena and datasources.',
    )
    TimestampColumn_1: Optional[TimestampColumn] = Field(
        None,
        alias='TimestampColumn',
        description='Contains information about the column used to track time in a source data file.',
    )


class Alert(BaseModel):
    Action_1: Optional[Action] = Field(None, alias='Action')
    AlertArn: Optional[Arn] = None
    AlertDescription_1: Optional[AlertDescription] = Field(
        None, alias='AlertDescription'
    )
    AlertFilters_1: Optional[AlertFilters] = Field(None, alias='AlertFilters')
    AlertName_1: Optional[AlertName] = Field(None, alias='AlertName')
    AlertSensitivityThreshold: Optional[SensitivityThreshold] = None
    AlertStatus_1: Optional[AlertStatus] = Field(None, alias='AlertStatus')
    AlertType_1: Optional[AlertType] = Field(None, alias='AlertType')
    AnomalyDetectorArn: Optional[Arn] = None
    CreationTime: Optional[Timestamp] = None
    LastModificationTime: Optional[Timestamp] = None


class ContributionMatrix(BaseModel):
    DimensionContributionList_1: Optional[DimensionContributionList] = Field(
        None, alias='DimensionContributionList'
    )


class CreateMetricSetRequest(BaseModel):
    AnomalyDetectorArn: Arn
    DimensionFilterList: Optional[MetricSetDimensionFilterList] = None
    DimensionList_1: Optional[DimensionList] = Field(None, alias='DimensionList')
    MetricList_1: MetricList = Field(..., alias='MetricList')
    MetricSetDescription_1: Optional[MetricSetDescription] = Field(
        None, alias='MetricSetDescription'
    )
    MetricSetFrequency: Optional[Frequency] = None
    MetricSetName_1: MetricSetName = Field(..., alias='MetricSetName')
    MetricSource_1: MetricSource = Field(..., alias='MetricSource')
    Offset_1: Optional[Offset] = Field(None, alias='Offset')
    Tags: Optional[TagMap] = None
    TimestampColumn_1: Optional[TimestampColumn] = Field(None, alias='TimestampColumn')
    Timezone_1: Optional[Timezone] = Field(None, alias='Timezone')


class DescribeAlertResponse(BaseModel):
    Alert_1: Optional[Alert] = Field(None, alias='Alert')


class DescribeAnomalyDetectionExecutionsResponse(BaseModel):
    ExecutionList_1: Optional[ExecutionList] = Field(None, alias='ExecutionList')
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class DescribeMetricSetResponse(BaseModel):
    AnomalyDetectorArn: Optional[Arn] = None
    CreationTime: Optional[Timestamp] = None
    DimensionFilterList: Optional[MetricSetDimensionFilterList] = None
    DimensionList_1: Optional[DimensionList] = Field(None, alias='DimensionList')
    LastModificationTime: Optional[Timestamp] = None
    MetricList_1: Optional[MetricList] = Field(None, alias='MetricList')
    MetricSetArn: Optional[Arn] = None
    MetricSetDescription_1: Optional[MetricSetDescription] = Field(
        None, alias='MetricSetDescription'
    )
    MetricSetFrequency: Optional[Frequency] = None
    MetricSetName_1: Optional[MetricSetName] = Field(None, alias='MetricSetName')
    MetricSource_1: Optional[MetricSource] = Field(None, alias='MetricSource')
    Offset_1: Optional[Offset] = Field(None, alias='Offset')
    TimestampColumn_1: Optional[TimestampColumn] = Field(None, alias='TimestampColumn')
    Timezone_1: Optional[Timezone] = Field(None, alias='Timezone')


class DetectedMetricSource(BaseModel):
    S3SourceConfig: Optional[DetectedS3SourceConfig] = None


class ListMetricSetsResponse(BaseModel):
    MetricSetSummaryList_1: Optional[MetricSetSummaryList] = Field(
        None, alias='MetricSetSummaryList'
    )
    NextToken_1: Optional[NextToken] = Field(None, alias='NextToken')


class MetricLevelImpact(BaseModel):
    ContributionMatrix_1: Optional[ContributionMatrix] = Field(
        None, alias='ContributionMatrix'
    )
    MetricName_1: Optional[MetricName] = Field(None, alias='MetricName')
    NumTimeSeries: Optional[Integer] = None


class MetricLevelImpactList(RootModel[List[MetricLevelImpact]]):
    root: List[MetricLevelImpact]


class AnomalyGroup(BaseModel):
    AnomalyGroupId: Optional[UUID] = None
    AnomalyGroupScore: Optional[Score] = None
    EndTime: Optional[TimestampString] = None
    MetricLevelImpactList_1: Optional[MetricLevelImpactList] = Field(
        None, alias='MetricLevelImpactList'
    )
    PrimaryMetricName: Optional[MetricName] = None
    StartTime: Optional[TimestampString] = None


class DetectedMetricSetConfig(BaseModel):
    MetricSetFrequency: Optional[DetectedField] = None
    MetricSource: Optional[DetectedMetricSource] = None
    Offset: Optional[DetectedField] = None


class GetAnomalyGroupResponse(BaseModel):
    AnomalyGroup_1: Optional[AnomalyGroup] = Field(None, alias='AnomalyGroup')


class DetectMetricSetConfigResponse(BaseModel):
    DetectedMetricSetConfig_1: Optional[DetectedMetricSetConfig] = Field(
        None, alias='DetectedMetricSetConfig'
    )
